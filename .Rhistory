train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
View(test)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
classified
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_training$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_training$wonseat,classified )
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_training$wonseat,classified )
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
precision
recall
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_training$wonseat)
mean(classified==dail_sample$wonseat)
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=3)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=3)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=5)
classified <- knn(train, test, dail_training$wonseat, k=5)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
library(quanteda)
inaugTexts <-inaugTexts
inaug_corpus <- corpus(inaugTexts)
kwic(inaugCorpus, "crisis", 3)
mydfm <- dfm(inaugCorpus, ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, groups = "President")
docnames(mydfm)
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, groups = "President", ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
obamadfm <- dfm(subset(inaugCorpus, President=="Obama"))
plot(obamadfm)
obamadfm <- dfm(subset(inaugCorpus, President=="Obama"),ignoredFeatures=stopwords("english"))
plot(obamadfm)
tekst <- data(exampleString)
tekst <- data(exampleString)
tekst <- data(exampleString)
toLower(tekst)
tekst <- data(exampleString)
toLower(tekst)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tekst
View(tekst)
tekst <- data(exampleString)
?tokenize
tokenize(exampleString)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tokenize(exampleString)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tekst <- data(exampleString)
tekst <- toLower(tekst)
?tokenize
tokenize(exampleString)
tokenize(exampleString, what = "sentence")
tekst <- tokenize(exampleString, what = "sentence")
wordstem(tekst)
tekst <- tokenize(exampleString)
wordstem(tekst)
require(tm)
install.packages("tm")
require(tm)
crude <- tm_map(crude, content_transformer(tolower))
data("crude")
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, removeNumbers)
crude <- tm_map(crude, stemDocument)
tdm <- TermDocumentMatrix(crude)
crude
crudeCorpus <- corpus(crude)
crudeDfm <- dfm(crudeCorpus)
data("crude")
crude
data("crude")
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, removeNumbers)
crude <- tm_map(crude, stemDocument)
tdm <- TermDocumentMatrix(crude)
crudeCorpus <- corpus(crude)
crudeDfm <- dfm(crudeCorpus)
```{r}
str(tdm)
```
str(tdm)
head(tdm$dimnames$Terms, 20)
head(tdm$dimnames$Terms, 20)
features_quanteda <- features(crudeDfm)
head(features_quanteda, 20)
str(crudeDfm)
object.size(crudeDfm)
object.size(tdm)
library(twitteR)
install.packages("twitterR")
library(twitteR)
library(twitteR)
install.packages("twitterR")
?setRepositories
install.packages(twitterR)
setRepositories(ind = c(1:6, 8))
install.packages("twitterR")
install.packages(c("arules", "ca", "e1071", "gstat", "intervals", "scales", "xts"))
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9 (1).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
install.packages("twitterR")
curl http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES
install.packages("twitteR")
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
results <- searchTwitter('text analysis', n=50)
df <- as.data.frame(t(sapply(results, as.data.frame)))
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
results <- searchTwitter('text analysis', n=50)
df <- as.data.frame(t(sapply(results, as.data.frame)))
usdf <- as.data.frame(us)
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
function (dir)
.Internal(setwd(dir))
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
getwd()
ludnosc <- read.csv("rezultaty/ludnosc.csv")
png("tekst/pictures/ludnosc.png")
par(mfrow = c(2,2))
hist(ludnosc$zarobki)
hist(ludnosc$wiek)
hist(ludnosc$wyksztalcenie)
hist(ludnosc$kobieta)
dev.off()
par(mfrow = c(2,2))
hist(ludnosc$zarobki)
hist(ludnosc$wiek)
hist(ludnosc$wyksztalcenie)
hist(ludnosc$kobieta)
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
getwd()
ludnosc <- read.csv("rezultaty/ludnosc.csv")
View(ludnosc)
ludnosc <- ludnosc[-ludnosc$kobieta]
ludnosc <- read.csv("rezultaty/ludnosc.csv")
ludnosc <- ludnosc[,-2]
ludnosc <- read.csv("rezultaty/ludnosc.csv")
ludnosc <- ludnosc[,-2]
ludnosc$mezczyzna[ludnosc$mezczyzna==1] <- "Mezczyzna"
ludnosc$mezczyzna[ludnosc$mezczyzna==0] <- "Kobieta"
ludnosc$wyksztalcenie[ludnosc$wyksztalcenie==0] <- "Brak"
ludnosc$wyksztalcenie[ludnosc$wyksztalcenie==1] <- "Podstawowe"
ludnosc$wyksztalcenie[ludnosc$wyksztalcenie==2] <- "Zawodowe"
ludnosc$wyksztalcenie[ludnosc$wyksztalcenie==3] <- "Srednie"
ludnosc$wyksztalcenie[ludnosc$wyksztalcenie==4] <- "Wyzsze"
ludnosc <- ludnosc[,-5]
?hist
par(mfrow = c(2,2))
hist(ludnosc$wiek, main="Histogram zmiennej wiek")
hist(ludnosc$zarobki, main="Histogram zmiennej zarobki" )
hist(ludnosc$wyksztalcenie, main="Histogram zmiennej wyksztalcenie")
hist(ludnosc$mezczyzna, main="Histogram zmiennej plec")
plot(ludnosc$wyksztalcenie, main="Histogram zmiennej wyksztalcenie")
plot(ludnosc$mezczyzna, main="Histogram zmiennej plec")
plot(as.factor(ludnosc$wyksztalcenie), main="Histogram zmiennej wyksztalcenie")
par(mfrow = c(2,2))
hist(ludnosc$wiek, main="Histogram zmiennej wiek", xlab = "Wiek")
hist(ludnosc$zarobki, main="Histogram zmiennej zarobki", xlab = "Zarobki" )
plot(as.factor(ludnosc$wyksztalcenie), main="Histogram zmiennej wyksztalcenie")
plot(as.factor(ludnosc$mezczyzna), main="Histogram zmiennej plec")
plot(as.factor(ludnosc$mezczyzna), main="Histogram zmiennej płec")
par(mfrow = c(2,2))
hist(ludnosc$wiek, main="Histogram zmiennej wiek", xlab = "Wiek")
hist(ludnosc$zarobki, main="Histogram zmiennej zarobki", xlab = "Zarobki" )
plot(as.factor(ludnosc$wyksztalcenie), main="Histogram zmiennej wyksztalcenie")
plot(as.factor(ludnosc$mezczyzna), main="Histogram zmiennej płeć")
p<-tableGrob(ludnosc$wiek)
library(ggplot2)
library(gridExtra)
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
p<-tableGrob(ludnosc$wiek)
library(xtable)
install.packages("xtable")
tli.table <-xtable(ludnosc$wiek)
library(xtable)
tli.table <-xtable(ludnosc$wiek)
tli.table <-xtable(ludnosc)
p<-tableGrob(ludnosc$wiek[1:100,])
tli.table <-xtable(ludnosc[1:100,])
print tli.table
tli.table <-xtable(ludnosc[1:100,])
print(tli.table)
table(ludnosc)
table(ludnosc$wiek,ludnosc$mezczyzna)
table(ludnosc[,5:])
table(ludnosc[5:])
table(ludnosc[,5:13])
print(as.data.frame(table(ludnosc[,5:13])))
ludnosc[5:13]
ludnosc[1,5:13]
ludnosc[1,5:26]
zainteresowania <- c("Moda","Gotowanie","Finanse","Kultura","Historia","Koncerty","Motoryzacja","Kosmetyki","Malarstwo","Ogrodnictwo","Gry","Sport","Boks","Fotografia","Kultura alternatywna","Nightlife","Teatr","Ksiazka","Historia polski","Natura","Piwowarstwo","Muzyka klasyczna","Ksiazki")
zainteresowania[ludnosc[1,5:27]]
ludnosc[1,5:27]
as.vector(ludnosc[1,5:27])
zainteresowania[c(1,3,2)]
ludnosc[1,5:27]==1
zainteresowania[ludnosc[1,5:27]==1]
ludnosc$moda <- zainteresowania[ludnosc[1,5:27]==1]
ludnosc$moda <- zainteresowania[ludnosc[5:27]==1]
png("tekst/pictures/ludnosc.png")
par(mfrow = c(2,2))
hist(ludnosc$wiek, main="Histogram zmiennej wiek", xlab = "Wiek")
hist(ludnosc$zarobki, main="Histogram zmiennej zarobki", xlab = "Zarobki" )
plot(as.factor(ludnosc$wyksztalcenie), main="Histogram zmiennej wyksztalcenie")
plot(as.factor(ludnosc$mezczyzna), main="Histogram zmiennej płeć")
dev.off()
zainteresowania <-ludnosc[5:27]
View(zainteresowania)
zainteresowania <-sumrows(ludnosc[5:27])
zainteresowania <-rowsums(ludnosc[5:27])
zainteresowania <-rowSums(ludnosc[5:27])
zainteresowania <-colSums(ludnosc[5:27])
zainteresowania <-colSums(ludnosc[5:27])
colnames(zainteresowania) <- "Ilość"
rownames(zainteresowania) <- c("Moda","Gotowanie","Finanse","Kultura","Historia","Koncerty","Motoryzacja","Kosmetyki","Malarstwo","Ogrodnictwo","Gry","Sport","Boks","Fotografia","Kultura alternatywna","Nightlife","Teatr","Ksiazka","Historia polski","Natura","Piwowarstwo","Muzyka klasyczna","Ksiazki")
zainteresowania <- as.data.table(colSums(ludnosc[5:27]))
colnames(zainteresowania) <- "Ilość"
zainteresowania <- as.data.frame(colSums(ludnosc[5:27]))
colnames(zainteresowania) <- "Ilość"
rownames(zainteresowania) <- c("Moda","Gotowanie","Finanse","Kultura","Historia","Koncerty","Motoryzacja","Kosmetyki","Malarstwo","Ogrodnictwo","Gry","Sport","Boks","Fotografia","Kultura alternatywna","Nightlife","Teatr","Ksiazka","Historia polski","Natura","Piwowarstwo","Muzyka klasyczna","Ksiazki")
library(xtable)
print(xtable(zainteresowania))
wiek <- read.csv("dane/produkty.csv")
produkty <- read.csv("rezultaty/produkty.csv")
View(produkty)
print(xtable(produkty))
prognoza <- read.csv("rezultaty/prognoza.csv")
View(prognoza)
?aggregate
aggregate(prognoza, by=c(tura), FUN="sum")
aggregate(prognoza, by=c(Tura), FUN="sum")
aggregate(prognoza, by=Tura, FUN="sum")
aggregate(prognoza, by=prognoza$Tura, FUN="sum")
aggregate(prognoza, by=list(Tura), FUN="sum")
aggregate(prognoza, by=list(prognoza$Tura), FUN="sum")
aggregate(prognoza[-2], by=list(prognoza$Tura), FUN="sum")
aggregate(prognoza[-2], by=list(prognoza$Tura))
aggregate(prognoza[-2], by=list(prognoza$Tura)
aggregate(prognoza[-2], by=list(prognoza$Tura))
aggregate(prognoza[-2], by=list(prognoza$Tura), fun="sum")
aggregate(prognoza[-2], by=list(prognoza$Tura), FUN="sum")
aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
png("tekst/pictures/prognoza.png")
plot(k_w$p, col="red", xaxt = 'n',xlab="Wykształcenie", ylab="Prawdopodobienstwo", main = 'Rozkład zmiennej wykształcenie')
axis(1, at=1:4,k_w$Wyksztalcenie)
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
plot(prognoza$Przewidywane, col="red", xaxt = 'n',xlab="Wykształcenie", ylab="Prawdopodobienstwo", main = 'Rozkład zmiennej wykształcenie')
dev.off()
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
plot(prognoza$Przewidywane, col="red", xaxt = 'n',xlab="Wykształcenie", ylab="Prawdopodobienstwo", main = 'Rozkład zmiennej wykształcenie')
par(mfrow = c(1,1))
png("tekst/pictures/prognoza.png")
dev.off()
plot(prognoza$Przewidywane, col="red", xaxt = 'n',xlab="Wykształcenie", ylab="Prawdopodobienstwo", main = 'Rozkład zmiennej wykształcenie')
axis(1, at=1:4,prognoza$Group.1)
axis(1, at=1:nrows(prognoza),prognoza$Group.1)
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
col="blue", xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
plot(prognoza$Przewidywane, col="blue",ylim=200, xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
max(prognoza)
plot(prognoza$Przewidywane, col="blue",ylim=max(prognoza)*1.25, xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=as.integer(max(prognoza)*1.25), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=100, xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=(0,100), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=c(0,100), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Sprzedaz, col="green")
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
png("tekst/pictures/prognoza.png")
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
dev.off()
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
dev.off()
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
prognoza <- read.csv("rezultaty/prognoza.csv")
prognoza <- aggregate(prognoza[3:4], by=list(prognoza$Tura), FUN="sum")
png("tekst/pictures/prognoza.png")
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
dev.off()
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
wyksztalcenie <- read.csv("dane/wyksztalcenie.csv")
k_w <- wyksztalcenie[wyksztalcenie$Plec=="Kobieta",]
m_w <- wyksztalcenie[wyksztalcenie$Plec=="Mezczyzna",]
par(mfrow = c(1,1))
png("tekst/pictures/wyksztalcenie.png")
plot(k_w$p, col="red", xaxt = 'n',xlab="Wykształcenie", ylab="Prawdopodobienstwo", main = 'Rozkład zmiennej wykształcenie')
axis(1, at=1:4,k_w$Wyksztalcenie)
lines(k_w$p, col="red")
points(m_w$p, col="green")
lines(m_w$p, col="green")
dev.off()
dev.off()
png("tekst/pictures/prognoza.png")
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
dev.off()
png("tekst/pictures/prog.png")
dev.off()
png("tekst/pictures/wiek.png")
plot(wiek, ylab="Prawdopodobienstwo", xlab="Wiek", main = 'Rozkład zmiennej wiek')
dev.off()
dev.off()
dev.off()
png("tekst/pictures/prog.png")
plot(prognoza$Przewidywane, col="blue", ylim=c(0,as.integer(max(prognoza)*1.25)), xaxt = 'n',xlab="Tura", ylab="Ilość produktów", main = 'Prognoza sprzedaży i rzeczywista sprzedaż produktów')
axis(1, at=1:nrow(prognoza),prognoza$Group.1)
lines(prognoza$Przewidywane, col="blue")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
dev.off()
dev.off()
dev.off()
png("tekst/pictures/ludnosc.png")
par(mfrow = c(2,2))
hist(ludnosc$wiek, main="Histogram zmiennej wiek", xlab = "Wiek")
hist(ludnosc$zarobki, main="Histogram zmiennej zarobki", xlab = "Zarobki" )
plot(as.factor(ludnosc$wyksztalcenie), main="Histogram zmiennej wyksztalcenie")
plot(as.factor(ludnosc$mezczyzna), main="Histogram zmiennej płeć")
dev.off()
