dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
f1_average <- c()
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
mean(f1_average)
mean(f1_average)
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
f1_score_function <- function(observation,prediction){
confusion_matrix <- table(observation,prediction)
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
return( f1_score)
}
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
print(f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
f1_score_function <- function(observation,prediction){
confusion_matrix <- table(observation,prediction)
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
return( f1_score)
}
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
}
mean(f1_average)
f1_score_function <- function(observation,prediction){
confusion_matrix <- table(observation,prediction)
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
return( f1_score)
}
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
}
mean(f1_average)
f1_score_function <- function(observation,prediction){
confusion_matrix <- table(observation,prediction)
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
return( f1_score)
}
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_predict,dail_sample$wonseat))
}
mean(f1_average)
f1_score_function <- function(observation,prediction){
confusion_matrix <- table(observation,prediction)
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
return( f1_score)
}
f1_average <- c()
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(reg3_1$formula, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
for (i in  1:8){
dail_sample <- sample(nrow(dail2002),nrow(dail2002)/8, replace=FALSE)
dail_training <- dail2002[-dail_sample,]
dail_sample <- dail2002[dail_sample,]
reg3_1 <- glm(wonseat ~ electorate + votes1997, data = dail_training, family=binomial)
reg3_predict <-  predict(reg3_1, dail_sample , type="response")
reg3_wonseat <- rep(0,nrow(dail_sample))
reg3_wonseat[reg3_predict>0.5] <- 1
f1_average <- c(f1_average,f1_score_function(reg3_wonseat,dail_sample$wonseat))
}
mean(f1_average)
require(class)
require(quantedaData)
require(quantedData)
install.packages("quantedaData")
install.packages("quanteda")
require(quantedaData)
require(quanteda)
?knn
classified <- knn(dail_training, dail_sample, trainclass, k=1)
train <- rbind(iris3[1:25,,1], iris3[1:25,,2], iris3[1:25,,3])
test <- rbind(iris3[26:50,,1], iris3[26:50,,2], iris3[26:50,,3])
cl <- factor(c(rep("s",25), rep("c",25), rep("v",25)))
cl
train <- cbind(dail_training$electorate,dail_training$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
require(class)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
View(test)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
classified
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_training$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_training$wonseat,classified )
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_training$wonseat,classified )
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
print(precision, recall)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
precision
recall
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision-recall)
f1_score
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_training$wonseat)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_training$wonseat)
mean(classified==dail_sample$wonseat)
require(class)
dail_training <- na.omit(dail_training)
dail_sample <- na.omit(dail_sample)
train <- cbind(dail_training$electorate,dail_training$votes1997)
test <- cbind(dail_sample$electorate,dail_sample$votes1997)
classified <- knn(train, test, dail_training$wonseat, k=1)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=3)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=3)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
classified <- knn(train, test, dail_training$wonseat, k=5)
classified <- knn(train, test, dail_training$wonseat, k=5)
confusion_matrix <- table(dail_sample$wonseat,classified )
true_positive <- confusion_matrix[1,1]
false_positive <- confusion_matrix[2,1]
false_negative <- confusion_matrix[1,2]
precision <- true_positive/(true_positive+false_positive)
recall <- true_positive/(true_positive+false_negative)
print(confusion_matrix)
f1_score <- 2 * (precision*recall)/(precision+recall)
f1_score
mean(classified==dail_sample$wonseat)
library(quanteda)
inaugTexts <-inaugTexts
inaug_corpus <- corpus(inaugTexts)
kwic(inaugCorpus, "crisis", 3)
mydfm <- dfm(inaugCorpus, ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, groups = "President")
docnames(mydfm)
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, groups = "President", ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
mydfm <- dfm(inaugCorpus, ignoredFeatures=stopwords("english"))
topfeatures(mydfm, 20)
obamadfm <- dfm(subset(inaugCorpus, President=="Obama"))
plot(obamadfm)
obamadfm <- dfm(subset(inaugCorpus, President=="Obama"),ignoredFeatures=stopwords("english"))
plot(obamadfm)
tekst <- data(exampleString)
tekst <- data(exampleString)
tekst <- data(exampleString)
toLower(tekst)
tekst <- data(exampleString)
toLower(tekst)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tekst
View(tekst)
tekst <- data(exampleString)
?tokenize
tokenize(exampleString)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tokenize(exampleString)
tekst <- data(exampleString)
tekst <- toLower(tekst)
tekst <- data(exampleString)
tekst <- toLower(tekst)
?tokenize
tokenize(exampleString)
tokenize(exampleString, what = "sentence")
tekst <- tokenize(exampleString, what = "sentence")
wordstem(tekst)
tekst <- tokenize(exampleString)
wordstem(tekst)
require(tm)
install.packages("tm")
require(tm)
crude <- tm_map(crude, content_transformer(tolower))
data("crude")
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, removeNumbers)
crude <- tm_map(crude, stemDocument)
tdm <- TermDocumentMatrix(crude)
crude
crudeCorpus <- corpus(crude)
crudeDfm <- dfm(crudeCorpus)
data("crude")
crude
data("crude")
crude <- tm_map(crude, content_transformer(tolower))
crude <- tm_map(crude, removePunctuation)
crude <- tm_map(crude, removeNumbers)
crude <- tm_map(crude, stemDocument)
tdm <- TermDocumentMatrix(crude)
crudeCorpus <- corpus(crude)
crudeDfm <- dfm(crudeCorpus)
```{r}
str(tdm)
```
str(tdm)
head(tdm$dimnames$Terms, 20)
head(tdm$dimnames$Terms, 20)
features_quanteda <- features(crudeDfm)
head(features_quanteda, 20)
str(crudeDfm)
object.size(crudeDfm)
object.size(tdm)
library(twitteR)
install.packages("twitterR")
library(twitteR)
library(twitteR)
install.packages("twitterR")
?setRepositories
install.packages(twitterR)
setRepositories(ind = c(1:6, 8))
install.packages("twitterR")
install.packages(c("arules", "ca", "e1071", "gstat", "intervals", "scales", "xts"))
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9 (1).zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Hubert/Desktop/twitteR_1.1.9.tar.gz", repos = NULL, type = "source")
install.packages("twitterR")
curl http://bioconductor.org/packages/3.1/bioc/src/contrib/PACKAGES
install.packages("twitteR")
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
results <- searchTwitter('text analysis', n=50)
df <- as.data.frame(t(sapply(results, as.data.frame)))
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
library(twitteR)
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
setup_twitter_oauth('ZOHJIRAwnw23FhvFWyUg','HTfEcEmRRDcx0ZsJ5CHOcmPc84AfDOp5VvIXwt0oY','778251283-ZkDTfl3IbIFZFXlVokA6Gpc19TZPyov3wucZ0XaB','8vgPnpEWP3qhvILmTLXVb9RslwcEwVVeKOo4KCYHOY')
results <- searchTwitter('text analysis', n=50)
df <- as.data.frame(t(sapply(results, as.data.frame)))
usdf <- as.data.frame(us)
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
koszty <- aggregate(koszty[5], by=list(koszty$Tura), FUN="sum")
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
points(prognoza$Sprzedaz, col="green")
lines(prognoza$Sprzedaz, col="green")
setwd("C:/Users/Hubert/Desktop/master-thesis/master-thesis/")
